// Code generated by "envopts -type=FooEnv"; DO NOT EDIT.
package example

import (
	"time"

	"github.com/caarlos0/env/v6"
)

// Option is a functional option to configure FooEnv
type Option func(*FooEnv)

// FromFooEnv takes fully configured FooEnv and returns it as an option. Can be used to parse environment
// variables manually and provide the result in places where an option argument is expected.
func FromFooEnv(v *FooEnv) Option {
	return func(c *FooEnv) { *c = *v }
}

// ParseEnv will parse environment variables into a slice of options. Any options for parsing the
// environment can be supplied, for example to parse under a prefix.
func ParseEnv(eo env.Options) (opts []Option, err error) {
	var o FooEnv
	opts = append(opts, FromFooEnv(&o))
	return opts, env.Parse(&o, eo)
}

// ApplyOptions will merge all options into the resulting FooEnv while also ensuring default values are
// always set.
func ApplyOptions(opts ...Option) (res FooEnv) {
	env.Parse(&res, env.Options{Environment: make(map[string]string)})
	for _, o := range opts {
		o(&res)
	}
	return
}

// WithHome configures FooEnv
func WithHome(v string) Option { return func(o *FooEnv) { o.Home = v } }

// WithHosts configures FooEnv
func WithHosts(v []string) Option { return func(o *FooEnv) { o.Hosts = v } }

// WithDuration configures: Duration of the timeout
func WithDuration(v time.Duration) Option { return func(o *FooEnv) { o.Duration = v } }

// WithFoo configures FooEnv
func WithFoo(v []env.Options) Option { return func(o *FooEnv) { o.Foo = v } }

// WithDar configures FooEnv
func WithDar(v []env.Options) Option { return func(o *FooEnv) { o.Dar = v } }

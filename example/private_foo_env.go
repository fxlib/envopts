// Code generated by "envopts -type=fooEnv -optionType=PrivOption -output=private_foo_env.go"; DO NOT EDIT.
package example

import (
	"time"

	"github.com/caarlos0/env/v6"
)

// PrivOption is a functional option to configure fooEnv
type PrivOption func(*fooEnv)

// fromFooEnv takes fully configured fooEnv and returns it as an option. Can be used to parse environment
// variables manually and provide the result in places where an option argument is expected.
func fromFooEnv(v *fooEnv) PrivOption {
	return func(c *fooEnv) { *c = *v }
}

// PrivOptionParseEnv will parse environment variables into a slice of options. Any options for parsing the
// environment can be supplied, for example to parse under a prefix.
func PrivOptionParseEnv(eo env.Options) (opts []PrivOption, err error) {
	var o fooEnv
	opts = append(opts, fromFooEnv(&o))
	return opts, env.Parse(&o, eo)
}

// applyPrivOptions will merge all options into the resulting fooEnv while also ensuring default values are
// always set.
func applyPrivOptions(opts ...PrivOption) (res fooEnv) {
	env.Parse(&res, env.Options{Environment: make(map[string]string)})
	for _, o := range opts {
		o(&res)
	}
	return
}

// WithHostsPrivOption configures fooEnv
func WithHostsPrivOption(v []string) PrivOption { return func(o *fooEnv) { o.Hosts = v } }

// WithDurationPrivOption configures fooEnv
func WithDurationPrivOption(v time.Duration) PrivOption { return func(o *fooEnv) { o.Duration = v } }
